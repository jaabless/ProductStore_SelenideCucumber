name: E-Commerce QA Automation Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  # ------------------------
  # 1. UI TESTS (BDD + Selenide)
  # ------------------------
  ui-tests:
    name: üß™ UI Tests
    runs-on: ubuntu-latest
    continue-on-error: false

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build Docker image for tests
        run: docker build -t ecommerce_ui_tests .

      - name: Run tests with Docker Compose
        run: |
          docker compose up --build --abort-on-container-exit --exit-code-from tests
        env:
          COMPOSE_FILE: docker-compose.yml

      - name: Upload Allure results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-results
          path: allure-results

  # ------------------------
  # 2. PERFORMANCE TESTS (JMeter)
  # ------------------------
  performance:
    name: üìä JMeter Load Test
    runs-on: ubuntu-latest
    needs: ui-tests
    if: always()

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run JMeter test plan
        run: |
          mkdir -p jmeter-results
          docker run --rm -v ${{ github.workspace }}:/jmeter \
            justb4/jmeter \
            -n -t /jmeter/performance/ProductStore_Performance_Test_Plan.jmx \
            -l /jmeter/jmeter-results/results.jtl \
            -e -o /jmeter/jmeter-results/html-report

      - name: Upload JMeter results
        uses: actions/upload-artifact@v4
        with:
          name: jmeter-results
          path: jmeter-results

  # ------------------------
  # 3. SECURITY TESTS (OWASP ZAP)
  # ------------------------
  security:
    name: OWASP ZAP Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Prepare reports folder
        run: mkdir -p reports

      - name: Run OWASP ZAP Scan
        run: |
          docker run --rm -u root -v $(pwd)/reports:/zap/wrk/:rw \
          zaproxy/zap-stable \
          zap-baseline.py \
            -t https://www.demoblaze.com/ \
            -r zap_report.html || true


      - name: Upload ZAP Report
        uses: actions/upload-artifact@v4
        with:
          name: ZAP Security Report
          path: reports/zap_report.html

      - name: list files
        run: ls -la reports

      - name: Deploy report to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GH_PAT }}
          publish_dir: ./reports
          publish_branch: gh-pages
          force_orphan: true

  # ------------------------
  # 4. DEPLOY ALLURE REPORT
  # ------------------------
  deploy-allure-report:
    name: Publish Allure Report
    runs-on: ubuntu-latest
    needs: ui-tests
    if: always()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Allure results
        uses: actions/download-artifact@v4
        with:
          name: allure-results
          path: allure-results

      - name: Install Allure CLI
        run: |
          wget https://github.com/allure-framework/allure2/releases/download/2.27.0/allure-2.27.0.tgz
          tar -xzf allure-2.27.0.tgz
          sudo mv allure-2.27.0 /opt/allure
          sudo ln -s /opt/allure/bin/allure /usr/local/bin/allure

      - name: Generate Allure report
        run: allure generate allure-results --clean -o allure-report

      - name: Deploy Allure report to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GH_PAT }}
          publish_dir: allure-report
          publish_branch: gh-pages
          destination_dir: allure-report
          force_orphan: false

  deploy-jmeter-report:
    name: Publish JMeter Report
    runs-on: ubuntu-latest
    needs: performance
    if: always()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download JMeter results
        uses: actions/download-artifact@v4
        with:
          name: jmeter-results
          path: jmeter-results

      - name: Deploy JMeter report to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GH_PAT }}
          publish_dir: jmeter-results/html-report
          publish_branch: gh-pages
          destination_dir: jmeter-report
          force_orphan: false

  deploy-zap-report:
    name: Publish ZAP Security Report
    runs-on: ubuntu-latest
    needs: security
    if: always()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download ZAP report artifact
        uses: actions/download-artifact@v4
        with:
          name: ZAP Security Report
          path: reports

      - name: Deploy ZAP report to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GH_PAT }}
          publish_dir: ./reports
          publish_branch: gh-pages
          destination_dir: zap-report
          force_orphan: false




  # ------------------------
  # 5. SLACK NOTIFICATION
  # ------------------------
  notify-slack:
    name: Slack Notification
    runs-on: ubuntu-latest
    needs: [ ui-tests, performance, security, deploy-allure-report, deploy-jmeter-report, deploy-zap-report ]
    if: always()

    steps:
      - name: Send Slack notification
        run: |
          # Default values
          STATUS="success"
          COLOR="good"
          EMOJI="‚úÖ"
          TITLE="*E-Commerce QA Pipeline Passed*"
          
          # If any upstream job failed because of test/assertion failures
          if [[ "${{ needs.ui-tests.result }}" == "failure" || \
                "${{ needs.performance.result }}" == "failure" || \
                "${{ needs.security.result }}" == "failure" ]]; then
            STATUS="completed_with_failures"
            COLOR="warning"
            EMOJI="‚ö†Ô∏è"
            TITLE="*E-Commerce QA Pipeline Completed with Failures*"
          fi
          
          # If any upstream job failed due to infra (cancelled or error)
           if [[ "${{ needs.ui-tests.result }}" == "cancelled" || \
                "${{ needs.performance.result }}" == "cancelled" || \
                "${{ needs.security.result }}" == "cancelled" || \
                "${{ needs.ui-tests.result }}" == "skipped" || \
                "${{ needs.performance.result }}" == "skipped" || \
                "${{ needs.security.result }}" == "skipped" ]]; then
             STATUS="failed"
             COLOR="danger"
             EMOJI="‚ùå"
             TITLE="*E-Commerce QA Pipeline Failed*"
           fi
          
           curl -X POST -H 'Content-type: application/json' --data "{
             \"attachments\": [
               {
                 \"color\": \"$COLOR\",
                 \"blocks\": [
                   {
                     \"type\": \"section\",
                     \"text\": {
                       \"type\": \"mrkdwn\",
                       \"text\": \"$EMOJI $TITLE\n*Status:* $STATUS\"
                     }
                   },
                   {
                     \"type\": \"section\",
                     \"fields\": [
                       {
                         \"type\": \"mrkdwn\",
                         \"text\": \"*Reports:*\\n‚Ä¢ <https://$GITHUB_REPOSITORY_OWNER.github.io/${{ github.event.repository.name }}/allure-report/index.html|Allure Report>\\n‚Ä¢ <https://$GITHUB_REPOSITORY_OWNER.github.io/${{ github.event.repository.name }}/jmeter-report/index.html|JMeter Report>\\n‚Ä¢ <https://$GITHUB_REPOSITORY_OWNER.github.io/${{ github.event.repository.name }}/zap-report/zap-report.html||ZAP Security Report>\"
                       },
                       {
                         \"type\": \"mrkdwn\",
                         \"text\": \"*Build URL:*\n$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID\"
                       }
                     ]
                   }
                 ]
               }
             ]
           }" ${{ secrets.NEWSLETTER_CHANNEL }}

  # ------------------------
  # 6. JIRA INTEGRATION (Optional)
  # ------------------------
  jira-xray:
    name: Push Results to Jira/Xray
    runs-on: ubuntu-latest
    needs: [ui-tests]
    if: always()

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # 1. Get Authentication Token from Xray
      - name: Get Xray Auth Token
        id: xray-auth
        run: |
          response=$(curl -s -X POST https://xray.cloud.getxray.app/api/v2/authenticate \
            -H "Content-Type: application/json" \
            -d "{ \"client_id\": \"${{ secrets.XRAY_CLIENT_ID }}\", \"client_secret\": \"${{ secrets.XRAY_CLIENT_SECRET }}\" }")
          token=$(echo $response | tr -d '"')
          echo "token=$token" >> $GITHUB_OUTPUT
      

      # 2. Upload Cucumber Results to Xray
      - name: Push Cucumber Results to Xray
        run: |
          curl -s -X POST https://xray.cloud.getxray.app/api/v2/import/execution/cucumber \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ steps.xray-auth.outputs.token }}" \
            --data-binary @target/cucumber.json
